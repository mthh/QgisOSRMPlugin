# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OsrmToolsDialog
                                 A QGIS plugin
 Plugin to use OSRM API in Qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-07-24
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Matthieu Viry
        email                : matthieu.viry@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5 import QtWidgets

from .osrm_route_dialogUi import Ui_OsrmRouteDialog
from .osrm_table_dialogUi import Ui_OsrmTableDialog
from .osrm_access_dialogUi import Ui_OsrmAccessDialog
from .osrm_tsp_dialogUi import Ui_OsrmTspDialog
from .osrm_batch_route_dialogUi import Ui_OsrmBatchRouteDialog

class OsrmRouteDialog(QtWidgets.QDialog, Ui_OsrmRouteDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(OsrmRouteDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

class OsrmTableDialog(QtWidgets.QDialog, Ui_OsrmTableDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(OsrmTableDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

class OsrmAccessDialog(QtWidgets.QDialog, Ui_OsrmAccessDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(OsrmAccessDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

class OsrmTspDialog(QtWidgets.QDialog, Ui_OsrmTspDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(OsrmTspDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

class OsrmBatchRouteDialog(QtWidgets.QDialog, Ui_OsrmBatchRouteDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(OsrmBatchRouteDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

